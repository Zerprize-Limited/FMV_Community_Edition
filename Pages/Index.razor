@page "/"
@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime
@inject ILocalStorageService localStorage
@inject StateContainer stateContainer
@inject IConfiguration render

@if (stateContainer.showModal)
{
    <About OnClick="ModalClose"></About>
}
@if (stateContainer.showColorPicker)
{
    <ColorSelect OnClose="ModalClose"></ColorSelect>
}
<MenuBar refreshParent="refreshParent" onInputFileChange="OnInputFileChange" fileIsLoaded="FileIsLoaded" />
<SideBar refreshParent="refreshParent" newFunction="NewFunction" />
<div id="mainWindow" class="main" touch-action=@stateContainer.touchAction @onkeydown=NextFn tabindex="0">
    <div>
        @if (stateContainer.inputDropStatus == "file-input-zone-drop")
        {
            <div class="file-input-zone-drop"><InputFile OnChange="OnInputFileChange" single accept=".xfmv" /></div>
        }
        <svg id="canvas_1" viewBox="0 0 @stateContainer.viewWidth @stateContainer.viewHeight" width=@stateContainer.canvasWidth height=@stateContainer.canvasHeight xmlns="http://www.w3.org/2000/svg">
            <defs>
                <style type="text/css">
                    @@import url("https://fonts.googleapis.com/css2?family=PT+Sans+Caption")
                </style>
                <radialGradient id="fnSelected" cx="50%" cy="50%" r="50%" fx="50%" fy="50%">
                    <stop offset="0%" style="stop-color:@render[stateContainer.newFnStyle+":selected-fill"];stop-opacity:0.75" />
                    <stop offset="75%" style="stop-color:@render[stateContainer.newFnStyle+":selected-fill"];stop-opacity:0.5" />
                    <stop offset="100%" style="stop-color:@render[stateContainer.newFnStyle+":selected-fill"];stop-opacity:0" />
                </radialGradient>
                <radialGradient id="fnExit" cx="50%" cy="50%" r="50%" fx="50%" fy="50%">
                    <stop offset="0%" style="stop-color:@render[stateContainer.newFnStyle+":exit-fill"];stop-opacity:0.75" />
                    <stop offset="75%" style="stop-color:@render[stateContainer.newFnStyle+":exit-fill"];stop-opacity:0.5" />
                    <stop offset="100%" style="stop-color:@render[stateContainer.newFnStyle+":exit-fill"];stop-opacity:0" />
                </radialGradient>
                <radialGradient id="fnGroup" cx="50%" cy="50%" r="50%" fx="50%" fy="50%">
                    <stop offset="0%" style="stop-color:@render[stateContainer.newFnStyle+":group-fill"];stop-opacity:0.75" />
                    <stop offset="75%" style="stop-color:@render[stateContainer.newFnStyle+":group-fill"];stop-opacity:0.5" />
                    <stop offset="100%" style="stop-color:@render[stateContainer.newFnStyle+":group-fill"];stop-opacity:0" />
                </radialGradient>
                <radialGradient id="fnEntry" cx="50%" cy="50%" r="50%" fx="50%" fy="50%">
                    <stop offset="0%" style="stop-color:@render[stateContainer.newFnStyle+":entry-fill"];stop-opacity:0.75" />
                    <stop offset="75%" style="stop-color:@render[stateContainer.newFnStyle+":entry-fill"];stop-opacity:0.5" />
                    <stop offset="100%" style="stop-color:@render[stateContainer.newFnStyle+":entry-fill"];stop-opacity:0" />
                </radialGradient>
                <radialGradient id="fnBackground" cx="50%" cy="50%" r="50%" fx="50%" fy="50%">
                    <stop offset="0%" style="stop-color:@render[stateContainer.newFnStyle+":background-fill"];stop-opacity:0.75" />
                    <stop offset="75%" style="stop-color:@render[stateContainer.newFnStyle+":background-fill"];stop-opacity:0.5" />
                    <stop offset="100%" style="stop-color:@render[stateContainer.newFnStyle+":background-fill"];stop-opacity:0" />
                </radialGradient>
                <radialGradient id="fnParent" cx="50%" cy="50%" r="50%" fx="50%" fy="50%">
                    <stop offset="0%" style="stop-color:@render[stateContainer.newFnStyle+":parent-fill"];stop-opacity:0.75" />
                    <stop offset="75%" style="stop-color:@render[stateContainer.newFnStyle+":parent-fill"];stop-opacity:0.5" />
                    <stop offset="100%" style="stop-color:@render[stateContainer.newFnStyle+":parent-fill"];stop-opacity:0" />
                </radialGradient>
            </defs>
            @if (stateContainer.fileLoaded)
            {
                <g @onclick="UnSelect" @ontouchstart="UnSelectTouch">
                    <rect fill=@render[stateContainer.newFnStyle+":canvas-color"] opacity=@render[stateContainer.newFnStyle+":canvas-opacity"] width="100%" height="100%" />
                </g>
                foreach (Coupling coupling in stateContainer.couplingList.FindAll(x => x.outputFn != stateContainer.selectedFn && x.toFn != stateContainer.selectedFn && x.Name != stateContainer.selectedLabel))
                {
                    <CouplingDisplay coupling=@coupling refreshParent="refreshParent" />
                }
                foreach (Function function in stateContainer.functionList.FindAll(x => x.IDNr != stateContainer.selectedFn))
                {
                    <FunctionDisplay function=@function refreshParent="refreshParent" />
                }
                foreach (Coupling coupling in stateContainer.couplingList.FindAll(x => x.Name == stateContainer.selectedLabel))
                {
                    <CouplingDisplay coupling=@coupling refreshParent="refreshParent" />
                }
                if (stateContainer.selectedFn != "-1")
                {
                    <FunctionDisplay function=@stateContainer.functionList.Find(x => x.IDNr == stateContainer.selectedFn) refreshParent="refreshParent" />
                }
            }
        </svg>
        <p>
            @stateContainer.debugOutput
        </p>
    </div>
</div>

@code {
    public int maxFn = -1;
    public double newFnX = -40;
    public double newFnY = 0;
    public bool isNewModel = true;

    private void refreshParent()
    {
        StateHasChanged();
    }
    private void ModalClose(bool state)
    {
        stateContainer.showModal = state;
        stateContainer.showColorPicker = state;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            try
            {
                await localStorage.SetItemAsync("backupData", stateContainer.projectData_Undo[0].OuterXml);
            }
            catch
            {

            }
        }
    }
    private void NewFunction()
    {
        if (stateContainer.selectedFn != "-1" && stateContainer.functionList.Find(x => x.IDNr == stateContainer.selectedFn)?.label == "")
        {
            stateContainer.defaultFnLabel();
        }
        if (stateContainer.projectData_Undo[0] == null)
        {
            stateContainer.fileLoaded = false;
            stateContainer.tempZoomA = 1;
            stateContainer.tempZoomF = 1;
            stateContainer.scaleZoom = 1.5;
            stateContainer.projectData_Undo[0] = new XmlDocument();
            stateContainer.projectData_Undo[0].LoadXml("<FM><Functions></Functions><Aspects scaleFunction=\"1\" scaleAspect=\"1\" scaleZoom=\"1.5\" Enhanced=\"true\"></Aspects></FM>");
            stateContainer.inputDropStatus = "file-input-zone-hide";
            stateContainer.fileLoaded = true;
        }
        else
        {
            stateContainer.updateUndo();
        }
        maxFn++;
        if (isNewModel)
        {
            stateContainer.fileLoaded = false;
            stateContainer.inputDropStatus = "file-input-zone-hide";
            stateContainer.fileLoaded = true;
            if (maxFn % 2 == 0)
            {
                if (maxFn % 8 == 0 && maxFn != 0) { newFnX = 50; newFnY += 240; }
                else { newFnX += 90; newFnY += 110; }
            }
            else
            {
                newFnX += 110;
                newFnY -= 90;
            }
        }
        else
        {
            if (stateContainer.selectedFn == "-1")
            {
                newFnX = 20;
                newFnY = 20;
            }
            else
            {
                newFnX = stateContainer.functionList.Find(x => x.IDNr == stateContainer.selectedFn)?.x + 90??20;
                newFnY = stateContainer.functionList.Find(x => x.IDNr == stateContainer.selectedFn)?.y + 110??20;
            }
        }
        stateContainer.viewWidth = Math.Max(stateContainer.viewWidth, newFnX + 120);
        stateContainer.viewHeight = Math.Max(stateContainer.viewHeight, newFnY + 120);
        stateContainer.canvasWidth = stateContainer.viewWidth * stateContainer.scaleZoom;
        stateContainer.canvasHeight = stateContainer.viewHeight * stateContainer.scaleZoom;

        XmlNode itemF = stateContainer.projectData_Undo[0].CreateElement("Function");
        XmlAttribute fnStyle = stateContainer.projectData_Undo[0].CreateAttribute("fnStyle");
        fnStyle.Value = stateContainer.newFnStyle.ToString();
        itemF.Attributes!.Append(fnStyle);
        XmlAttribute isInput = stateContainer.projectData_Undo[0].CreateAttribute("isInput");
        isInput.Value = "false";
        itemF.Attributes.Append(isInput);
        XmlAttribute orphans = stateContainer.projectData_Undo[0].CreateAttribute("orphans");
        orphans.Value = "0";
        itemF.Attributes.Append(orphans);
        XmlNode IDNr = stateContainer.projectData_Undo[0].CreateElement("IDNr");
        IDNr.InnerText = maxFn.ToString();
        itemF.AppendChild(IDNr);
        XmlNode FunctionType = stateContainer.projectData_Undo[0].CreateElement("FunctionType");
        FunctionType.InnerText = "2";
        itemF.AppendChild(FunctionType);
        XmlNode IDName = stateContainer.projectData_Undo[0].CreateElement("IDName");
        IDName.InnerText = "";
        itemF.AppendChild(IDName);
        //if (selectedFn>-1) {selectGroupChildren(false);}
        stateContainer.selectedFn = maxFn.ToString();
        stateContainer.isDisabled = false;
        stateContainer.selectedLabel = "";
        XmlAttribute fnX = stateContainer.projectData_Undo[0].CreateAttribute("x");
        XmlAttribute fnY = stateContainer.projectData_Undo[0].CreateAttribute("y");
        fnX.Value = newFnX.ToString();
        fnY.Value = newFnY.ToString();
        itemF.Attributes.Append(fnX);
        itemF.Attributes.Append(fnY);
        stateContainer.projectData_Undo[0].SelectSingleNode("//FM/Functions")!.AppendChild(itemF);
        stateContainer.functionList.Add(new Function(maxFn.ToString(), newFnX, newFnY, stateContainer.newFnStyle.ToString(), "2", "", 0, "false", "", ""));
        stateContainer.fnName = "";
        FocusElement("fnNameText");
        ClearElement("fnNameText");
    }
    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        stateContainer.debugOutput = "File loading ...";
        stateContainer.fileLoaded = false;
        stateContainer.viewWidth = 0;
        stateContainer.viewHeight = 0;
        var buffer = new byte[e.File.Size];
        await e.File.OpenReadStream(1050000).ReadAsync(buffer);
        stateContainer.undoIndex = 0;
        stateContainer.projectData_Undo = new XmlDocument[700];
        stateContainer.projectData_Undo[0] = new XmlDocument();
        stateContainer.projectData_Undo[0].LoadXml(Encoding.UTF8.GetString(buffer));
        stateContainer.fileName = e.File.Name;
        stateContainer.inputDropStatus = "file-input-zone-hide";
        FileIsLoaded();
    }
    private void FileIsLoaded()
    {
        stateContainer.selectedFn = "-1";
        stateContainer.fnName = "";
        stateContainer.isDisabled = true;
        stateContainer.aspectsList = new List<Aspect>();
        stateContainer.outputsList = new List<Aspect>();
        stateContainer.couplingList = new List<Coupling>();
        stateContainer.functionList = new List<Function>();
        maxFn = -1;
        var getFns = stateContainer.projectData_Undo[0].SelectNodes("//FM/Functions/Function");
        if (getFns != null)
        {
            stateContainer.newFnStyle = int.Parse(getFns[0]?.Attributes?["fnStyle"]?.Value ?? "0");
            foreach (XmlNode fn in getFns)
            {
                //this is for modern background functions to indicate which side to place the aspect circle, Input (left) or Output (right)
                if (fn.SelectSingleNode("@orphans") == null)
                {
                    fn.Attributes!.Append(stateContainer.projectData_Undo[0].CreateAttribute("orphans"));
                }
                fn.SelectSingleNode("@orphans")!.Value = "0";
                XmlAttribute isInput = stateContainer.projectData_Undo[0].CreateAttribute("isInput");
                if (stateContainer.projectData_Undo[0].SelectNodes("//FM/Inputs/Input[FunctionIDNr = " + fn.SelectSingleNode("IDNr")?.InnerText + "]")?.Count != 0)
                {
                    isInput.Value = "true";
                    fn.Attributes!.Append(isInput);
                }
                else
                {
                    isInput.Value = "false";
                    fn.Attributes!.Append(isInput);
                }
                //as the Functions are read from the loaded file, add them to the functionList
                stateContainer.functionList.Add(new Function(fn.SelectSingleNode("IDNr")!.InnerText, double.Parse(fn.SelectSingleNode("@x")?.Value ?? "120"), double.Parse(fn.SelectSingleNode("@y")?.Value ?? "120"),
                    fn.SelectSingleNode("@fnStyle")?.Value ?? stateContainer.newFnStyle.ToString(), fn.SelectSingleNode("FunctionType")?.InnerText ?? "2", fn.SelectSingleNode("IDName")?.InnerText ?? "",
                    int.Parse(fn.SelectSingleNode("@orphans")?.Value ?? "0"), fn.SelectSingleNode("@isInput")?.Value ?? "false", fn.SelectSingleNode("@style")?.Value ?? "", fn.SelectSingleNode("@color")?.Value ?? ""));
                maxFn = Math.Max(maxFn, Convert.ToInt32(fn.SelectSingleNode("IDNr")!.InnerText));
                stateContainer.viewWidth = Math.Max(stateContainer.viewWidth, Convert.ToDouble(fn.SelectSingleNode("@x")?.Value??"120") + 120);
                stateContainer.viewHeight = Math.Max(stateContainer.viewHeight, Convert.ToDouble(fn.SelectSingleNode("@y")?.Value ?? "120") + 120);
            }
        }
        if (stateContainer.projectData_Undo[0].SelectSingleNode("//FM/Aspects") == null)
        {
            stateContainer.projectData_Undo[0].SelectSingleNode("//FM")!.AppendChild(stateContainer.projectData_Undo[0].CreateElement("Aspects"));
        }
        XmlNode aspectsA = stateContainer.projectData_Undo[0].SelectSingleNode("//FM/Aspects")!;
        if (aspectsA.SelectSingleNode("@scaleFunction") == null)
        {
            XmlAttribute scaleF = stateContainer.projectData_Undo[0].CreateAttribute("scaleFunction");
            scaleF.Value = "1";
            aspectsA.Attributes!.Append(scaleF);
        }
        if (aspectsA.SelectSingleNode("@scaleAspect") == null)
        {
            XmlAttribute scaleA = stateContainer.projectData_Undo[0].CreateAttribute("scaleAspect");
            scaleA.Value = "1";
            aspectsA.Attributes!.Append(scaleA);
        }
        if (aspectsA.SelectSingleNode("@scaleZoom") == null)
        {
            XmlAttribute scaleZ = stateContainer.projectData_Undo[0].CreateAttribute("scaleZoom");
            scaleZ.Value = "1";
            aspectsA.Attributes!.Append(scaleZ);
        }
        if (aspectsA.SelectSingleNode("@Enhanced") == null)
        {
            XmlAttribute enhanced = stateContainer.projectData_Undo[0].CreateAttribute("Enhanced");
            enhanced.Value = "false";
            aspectsA.Attributes!.Append(enhanced);
        }
        if (aspectsA.SelectSingleNode("@WebEnhanced") == null)
        {
            XmlAttribute webenhanced = stateContainer.projectData_Undo[0].CreateAttribute("WebEnhanced");
            webenhanced.Value = "false";
            aspectsA.Attributes!.Append(webenhanced);
        }
        int idCount = 0;
        foreach (XmlNode itemI in stateContainer.projectData_Undo[0].SelectNodes("//FM/Inputs/Input")!)
        {
            if (itemI.SelectSingleNode("IDNr")?.InnerText != idCount.ToString())
            {
                itemI.SelectSingleNode("IDNr")!.InnerText = idCount.ToString();
            }
            if (itemI.SelectSingleNode("@orphan") == null)
            {
                itemI.Attributes!.Append(stateContainer.projectData_Undo[0].CreateAttribute("orphan"));
            }
            itemI.SelectSingleNode("@orphan")!.Value = "true";
            stateContainer.aspectsList.Add(new Aspect("Input", idCount.ToString(), "true", itemI.SelectSingleNode("IDName")?.InnerText ?? "", itemI.SelectSingleNode("FunctionIDNr")?.InnerText ?? ""));
            idCount++;
        }
        idCount = 0;
        foreach (XmlNode itemI in stateContainer.projectData_Undo[0].SelectNodes("//FM/Preconditions/Precondition")!)
        {
            if (itemI.SelectSingleNode("IDNr")?.InnerText != idCount.ToString())
            {
                itemI.SelectSingleNode("IDNr")!.InnerText = idCount.ToString();
            }
            if (itemI.SelectSingleNode("@orphan") == null)
            {
                itemI.Attributes!.Append(stateContainer.projectData_Undo[0].CreateAttribute("orphan"));
            }
            itemI.SelectSingleNode("@orphan")!.Value = "true";
            stateContainer.aspectsList.Add(new Aspect("Precondition", idCount.ToString(), "true", itemI.SelectSingleNode("IDName")?.InnerText ?? "", itemI.SelectSingleNode("FunctionIDNr")?.InnerText ?? ""));
            idCount++;
        }
        idCount = 0;
        foreach (XmlNode itemI in stateContainer.projectData_Undo[0].SelectNodes("//FM/Resources/Resource")!)
        {
            if (itemI.SelectSingleNode("IDNr")?.InnerText != idCount.ToString())
            {
                itemI.SelectSingleNode("IDNr")!.InnerText = idCount.ToString();
            }
            if (itemI.SelectSingleNode("@orphan") == null)
            {
                itemI.Attributes!.Append(stateContainer.projectData_Undo[0].CreateAttribute("orphan"));
            }
            itemI.SelectSingleNode("@orphan")!.Value = "true";
            stateContainer.aspectsList.Add(new Aspect("Resource", idCount.ToString(), "true", itemI.SelectSingleNode("IDName")?.InnerText ?? "", itemI.SelectSingleNode("FunctionIDNr")?.InnerText ?? ""));
            idCount++;
        }
        idCount = 0;
        foreach (XmlNode itemI in stateContainer.projectData_Undo[0].SelectNodes("//FM/Controls/Control")!)
        {
            if (itemI.SelectSingleNode("IDNr")?.InnerText != idCount.ToString())
            {
                itemI.SelectSingleNode("IDNr")!.InnerText = idCount.ToString();
            }
            if (itemI.SelectSingleNode("@orphan") == null)
            {
                itemI.Attributes!.Append(stateContainer.projectData_Undo[0].CreateAttribute("orphan"));
            }
            itemI.SelectSingleNode("@orphan")!.Value = "true";
            stateContainer.aspectsList.Add(new Aspect("Control", idCount.ToString(), "true", itemI.SelectSingleNode("IDName")?.InnerText ?? "", itemI.SelectSingleNode("FunctionIDNr")?.InnerText ?? ""));
            idCount++;
        }
        idCount = 0;
        foreach (XmlNode itemI in stateContainer.projectData_Undo[0].SelectNodes("//FM/Times/Time")!)
        {
            if (itemI.SelectSingleNode("IDNr")?.InnerText != idCount.ToString())
            {
                itemI.SelectSingleNode("IDNr")!.InnerText = idCount.ToString();
            }
            if (itemI.SelectSingleNode("@orphan") == null)
            {
                itemI.Attributes!.Append(stateContainer.projectData_Undo[0].CreateAttribute("orphan"));
            }
            itemI.SelectSingleNode("@orphan")!.Value = "true";
            stateContainer.aspectsList.Add(new Aspect("Time", idCount.ToString(), "true", itemI.SelectSingleNode("IDName")?.InnerText ?? "", itemI.SelectSingleNode("FunctionIDNr")?.InnerText ?? ""));
            idCount++;
        }
        if (aspectsA.SelectSingleNode("@WebEnhanced")?.Value != "updated")
        {
            //while (aspectsA.FirstChild != null)
            //    aspectsA.RemoveChild(aspectsA.FirstChild);
            string[] dictArray = new string[4] { "", "", "", "" };
            idCount = 0;
            foreach (XmlNode itemO in stateContainer.projectData_Undo[0].SelectNodes("//FM/Outputs/Output")!)
            {
                if (itemO.SelectSingleNode("IDNr")?.InnerText != idCount.ToString())
                {
                    itemO.SelectSingleNode("IDNr")!.InnerText = idCount.ToString();
                }
                string isOutputOrphan = "true";
                dictArray[0] = itemO.SelectSingleNode("FunctionIDNr")?.InnerText ?? "";
                dictArray[1] = itemO.SelectSingleNode("IDName")?.InnerText ?? "";
                int iTo = stateContainer.aspectsList.Count;
                foreach (var aspect in stateContainer.aspectsList.FindAll(x => x.IDName == dictArray[1]))
                {
                    dictArray[2] = aspect.FunctionIDNr;
                    dictArray[3] = aspect.Type.Substring(0, 1);
                    stateContainer.reSetAspect(dictArray, double.Parse(render[stateContainer.newFnStyle + ":aspectX:O"]), double.Parse(render[stateContainer.newFnStyle + ":aspectY:O"]),
                        double.Parse(render[stateContainer.newFnStyle + ":aspectX:" + dictArray[3]]), double.Parse(render[stateContainer.newFnStyle + ":aspectY:" + dictArray[3]]),
                        int.Parse(render[stateContainer.newFnStyle + ":aspect-font-wrap"]));
                    aspect.Orphan = "false";
                    stateContainer.projectData_Undo[0].SelectSingleNode("//FM/" + aspect.Type + "s/" + aspect.Type + "[IDNr=\"" + aspect.IDNr + "\"]/@orphan")!.Value = "false";
                    isOutputOrphan = "false";
                }
                if (itemO.SelectSingleNode("@orphan") == null)
                {
                    itemO.Attributes!.Append(stateContainer.projectData_Undo[0].CreateAttribute("orphan"));
                }
                itemO.SelectSingleNode("@orphan")!.Value = isOutputOrphan;
                if (isOutputOrphan == "true")
                {
                    int orphans = Convert.ToInt32(stateContainer.projectData_Undo[0].SelectSingleNode("//FM/Functions/Function[IDNr=\"" + dictArray[0] + "\"]/@orphans")?.Value);
                    orphans |= 1 << 1; //orphans &= ~(1 << 1);
                    stateContainer.projectData_Undo[0].SelectSingleNode("//FM/Functions/Function[IDNr=\"" + dictArray[0] + "\"]/@orphans")!.Value = orphans.ToString();
                    stateContainer.functionList.Find(x => x.IDNr == dictArray[0])!.orphans = orphans;
                }
                stateContainer.outputsList.Add(new Aspect("Output", idCount.ToString(), isOutputOrphan, itemO.SelectSingleNode("IDName")?.InnerText ?? "", itemO.SelectSingleNode("FunctionIDNr")?.InnerText ?? ""));
                idCount++;
            }
            foreach (var aspect in stateContainer.aspectsList.FindAll(x => x.Orphan == "true"))
            {
                int orphans = Convert.ToInt32(stateContainer.projectData_Undo[0].SelectSingleNode("//FM/Functions/Function[IDNr=\"" + aspect.FunctionIDNr + "\"]/@orphans")?.Value);
                switch (aspect.Type)
                { //orphans |= 1 << 0; //orphans &= ~(1 << 0); //if (1 >> 0) & 1 == 1;
                    case "Input": orphans |= 1 << 0; break;
                    case "Precondition": orphans |= 1 << 2; break;
                    case "Resource": orphans |= 1 << 3; break;
                    case "Control": orphans |= 1 << 4; break;
                    case "Time": orphans |= 1 << 5; break;
                }
                stateContainer.projectData_Undo[0].SelectSingleNode("//FM/Functions/Function[IDNr=\"" + aspect.FunctionIDNr + "\"]/@orphans")!.Value = orphans.ToString();
                stateContainer.functionList.Find(x => x.IDNr == aspect.FunctionIDNr)!.orphans = orphans;
            }
            aspectsA.SelectSingleNode("@WebEnhanced")!.Value = "notupdated";
        }
        stateContainer.tempZoomA = Convert.ToDouble(stateContainer.projectData_Undo[0].SelectSingleNode("//FM/Aspects/@scaleAspect")!.Value);
        stateContainer.tempZoomF = Convert.ToDouble(stateContainer.projectData_Undo[0].SelectSingleNode("//FM/Aspects/@scaleFunction")!.Value);
        stateContainer.scaleZoom = Convert.ToDouble(stateContainer.projectData_Undo[0].SelectSingleNode("//FM/Aspects/@scaleZoom")!.Value);
        stateContainer.canvasWidth = stateContainer.viewWidth * stateContainer.scaleZoom;
        stateContainer.canvasHeight = stateContainer.viewHeight * stateContainer.scaleZoom;
        newFnX = 20;
        newFnY = 20;
        isNewModel = false;
        stateContainer.fileLoaded = true;
        stateContainer.debugOutput = "";
    }
    private void UnSelectTouch(TouchEventArgs e)
    {
        if (stateContainer.selectedFn != "-1" && stateContainer.functionList.Find(x => x.IDNr == stateContainer.selectedFn)?.label == "")
        {
            stateContainer.defaultFnLabel();
        }
        stateContainer.selectedFn = "-1";
        stateContainer.isDisabled = true;
        stateContainer.selectedLabel = "";
        stateContainer.fnName = "";
        stateContainer.touchAction = "auto";
        StateHasChanged();
    }
    private void UnSelect(MouseEventArgs e)
    {
        if (stateContainer.selectedFn != "-1" && stateContainer.functionList.Find(x => x.IDNr == stateContainer.selectedFn)?.label == "")
        {
            stateContainer.defaultFnLabel();
        }
        stateContainer.selectedFn = "-1";
        stateContainer.isDisabled = true;
        stateContainer.selectedLabel = "";
        stateContainer.fnName = "";
        stateContainer.touchAction = "auto";
        StateHasChanged();
    }
    public async void ClearElement(string elementName)
    {
        await JSRuntime.InvokeVoidAsync("clearInput", elementName);
    }
    public async void FocusElement(string elementName)
    {
        await JSRuntime.InvokeVoidAsync("focusInput", elementName);
    }
    private void NextFn(KeyboardEventArgs e)
    {
        var findFn = stateContainer.functionList.Find(x => x.IDNr == stateContainer.selectedFn);
        var findCoupling = stateContainer.couplingList.Find(x => x.Name == stateContainer.selectedLabel);
        if (stateContainer.selectedFn != "-1" && findFn?.label == "")
        {
            stateContainer.defaultFnLabel();
        }
        if (findFn != null)
        {
            findFn.dragFn = false;
        }
        if (findCoupling != null)
        {
            findCoupling.dragAspect = false;
            stateContainer.selectedLabel = "";
        }
        if (e.Key == "ArrowRight")
        {
            stateContainer.selectedFn = (int.Parse(stateContainer.selectedFn) + 1).ToString();
            findFn = stateContainer.functionList.Find(x => x.IDNr == stateContainer.selectedFn);
            if (findFn == null)
            {
                findFn = stateContainer.functionList.First();
                stateContainer.selectedFn = findFn.IDNr;
            }
            stateContainer.fnName = findFn.label;
            FocusElement("newFnButton");
        }
        else if (e.Key == "ArrowLeft")
        {
            stateContainer.selectedFn = (int.Parse(stateContainer.selectedFn) - 1).ToString();
            findFn = stateContainer.functionList.Find(x => x.IDNr == stateContainer.selectedFn);
            if (findFn == null)
            {
                findFn = stateContainer.functionList.Last();
                stateContainer.selectedFn = findFn.IDNr;
            }
            stateContainer.fnName = findFn.label;
            stateContainer.isDisabled = false;
            FocusElement("newFnButton");
        }
        else if (e.Code == "KeyI")
        {
            FocusElement("newIButton");
        }
        else if (e.Code == "KeyO")
        {
            FocusElement("newOButton");
        }
        else if (e.Code == "KeyP")
        {
            FocusElement("newPButton");
        }
        else if (e.Code == "KeyR")
        {
            FocusElement("newRButton");
        }
        else if (e.Code == "KeyT")
        {
            FocusElement("newTButton");
        }
        else if (e.Code == "KeyC")
        {
            FocusElement("newCButton");
        }
        else if (e.Key == "+")
        {
            FocusElement("newFnButton");
        }
    }
    
}